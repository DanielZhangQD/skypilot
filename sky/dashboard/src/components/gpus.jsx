/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/X5tLGA3WPNU
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { CircularProgress } from '@mui/material';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Layout } from '@/components/elements/layout';
import { RotateCwIcon } from 'lucide-react';
import { useMobile } from '@/hooks/useMobile';
import { getGPUs, getCloudGPUs } from '@/data/connectors/gpus';

// Set the refresh interval to 1 minute for GPU data
const GPU_REFRESH_INTERVAL = 60000;

export function GPUs() {
  const [loading, setLoading] = useState(true);
  const [isInitialLoad, setIsInitialLoad] = useState(true);
  const refreshDataRef = React.useRef(null);
  const isMobile = useMobile();

  const [allGPUs, setAllGPUs] = useState([]);
  const [perContextGPUs, setPerContextGPUs] = useState([]);
  const [perNodeGPUs, setPerNodeGPUs] = useState([]);

  // Tab state
  const [selectedTab, setSelectedTab] = useState('kubernetes');
  // Cloud GPUs state
  const [cloudLoading, setCloudLoading] = useState(false);
  const [cloudData, setCloudData] = useState({
    commonGPUs: [],
    tpus: [],
    otherGPUs: [],
  });
  const [cloudInitialLoad, setCloudInitialLoad] = useState(true);

  const fetchData = React.useCallback(async () => {
    setLoading(true);
    try {
      const gpusResponse = await getGPUs();
      const {
        allGPUs: fetchedAllGPUs,
        perContextGPUs: fetchedPerContextGPUs,
        perNodeGPUs: fetchedPerNodeGPUs,
      } = gpusResponse;

      setAllGPUs(fetchedAllGPUs || []);
      setPerContextGPUs(fetchedPerContextGPUs || []);
      setPerNodeGPUs(fetchedPerNodeGPUs || []);
    } catch (err) {
      console.error('Error fetching data:', err);
      setAllGPUs([]);
      setPerContextGPUs([]);
      setPerNodeGPUs([]);
    } finally {
      setLoading(false);
      if (isInitialLoad) setIsInitialLoad(false);
    }
  }, [isInitialLoad]);

  React.useEffect(() => {
    if (refreshDataRef) {
      refreshDataRef.current = fetchData;
    }
  }, [refreshDataRef, fetchData]);

  useEffect(() => {
    let isCurrent = true;

    fetchData();

    const interval = setInterval(() => {
      if (isCurrent) {
        fetchData();
      }
    }, GPU_REFRESH_INTERVAL);

    return () => {
      isCurrent = false;
      clearInterval(interval);
    };
  }, [fetchData]);

  const handleRefresh = () => {
    if (selectedTab === 'kubernetes') {
      if (refreshDataRef.current) {
        refreshDataRef.current();
      }
    } else if (selectedTab === 'cloud') {
      setCloudLoading(true);
      setCloudInitialLoad(false); // Prevent auto-fetch
      getCloudGPUs()
        .then((data) => {
          setCloudData(data);
        })
        .finally(() => {
          setCloudLoading(false);
        });
    }
  };

  // Calculate summary data
  const totalGpuTypes = allGPUs.length;
  const grandTotalGPUs = allGPUs.reduce((sum, gpu) => sum + gpu.gpu_total, 0);
  const grandTotalFreeGPUs = allGPUs.reduce(
    (sum, gpu) => sum + gpu.gpu_free,
    0
  );

  // Group perContextGPUs by context
  const groupedPerContextGPUs = React.useMemo(() => {
    if (!perContextGPUs) return {};
    return perContextGPUs.reduce((acc, gpu) => {
      const { context } = gpu;
      if (!acc[context]) {
        acc[context] = [];
      }
      acc[context].push(gpu);
      return acc;
    }, {});
  }, [perContextGPUs]);

  // Group perNodeGPUs by context
  const groupedPerNodeGPUs = React.useMemo(() => {
    if (!perNodeGPUs) return {};
    return perNodeGPUs.reduce((acc, node) => {
      const { context } = node;
      if (!acc[context]) {
        acc[context] = [];
      }
      acc[context].push(node);
      return acc;
    }, {});
  }, [perNodeGPUs]);

  // Fetch cloud GPUs only when tab is selected
  useEffect(() => {
    if (selectedTab === 'cloud' && cloudInitialLoad) {
      setCloudLoading(true);
      getCloudGPUs()
        .then((data) => {
          setCloudData(data);
        })
        .finally(() => {
          setCloudLoading(false);
          setCloudInitialLoad(false);
        });
    }
  }, [selectedTab, cloudInitialLoad]);

  return (
    <Layout highlighted="gpus">
      <div className="flex items-center mb-4 h-5 w-full">
        <div className="flex space-x-6">
          <button
            className={`transition-colors duration-150 border-b-2 ${selectedTab === 'kubernetes' ? 'border-transparent text-blue-600' : 'border-transparent text-gray-500 hover:text-blue-600'}`}
            onClick={() => setSelectedTab('kubernetes')}
          >
            Kubernetes GPUs
          </button>
          <button
            className={`transition-colors duration-150 border-b-2 ${selectedTab === 'cloud' ? 'border-transparent text-blue-600' : 'border-transparent text-gray-500 hover:text-blue-600'}`}
            onClick={() => setSelectedTab('cloud')}
          >
            Cloud GPUs
          </button>
        </div>
        <div className="flex items-center space-x-2 ml-auto">
          {(loading || cloudLoading) && (
            <div className="flex items-center mr-2">
              <CircularProgress size={15} className="mt-0" />
              <span className="ml-2 text-gray-500 text-sm">Loading...</span>
            </div>
          )}
          <Button
            variant="ghost"
            size="sm"
            onClick={handleRefresh}
            disabled={
              (selectedTab === 'kubernetes' && loading) ||
              (selectedTab === 'cloud' && cloudLoading)
            }
            className="text-sky-blue hover:text-sky-blue-bright"
            title="Refresh"
          >
            <RotateCwIcon className="h-4 w-4 mr-1.5" />
            {!isMobile && <span>Refresh</span>}
          </Button>
        </div>
      </div>

      {/* Tab Content */}
      {selectedTab === 'kubernetes' ? (
        <>
          {/* Initial loading spinner */}
          {isInitialLoad ? (
            <div className="flex flex-col items-center justify-center h-64">
              <CircularProgress size={32} className="mb-4" />
              <span className="text-gray-500 text-lg">Loading...</span>
            </div>
          ) : (
            <>
              {/* Summary Section */}
              {allGPUs.length > 0 ? (
                <Card className="mb-4 p-4">
                  <div>
                    <h3 className="text-lg font-semibold mb-3">
                      GPUs on Kubernetes
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                      <Card className="p-4">
                        <div>
                          <p className="text-sm text-gray-500">
                            Total GPU Types
                          </p>
                          <p className="text-2xl font-bold">{totalGpuTypes}</p>
                        </div>
                      </Card>
                      <Card className="p-4">
                        <div>
                          <p className="text-sm text-gray-500">
                            Total GPUs (All Types)
                          </p>
                          <p className="text-2xl font-bold">{grandTotalGPUs}</p>
                        </div>
                      </Card>
                      <Card className="p-4">
                        <div>
                          <p className="text-sm text-gray-500">
                            Total Free GPUs (All Types)
                          </p>
                          <p className="text-2xl font-bold">
                            {grandTotalFreeGPUs}
                          </p>
                        </div>
                      </Card>
                    </div>

                    <h4 className="text-md font-semibold mb-3">GPU Types</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4">
                      {allGPUs.map((gpu) => {
                        const usedGpus = gpu.gpu_total - gpu.gpu_free;
                        const freePercentage =
                          gpu.gpu_total > 0
                            ? (gpu.gpu_free / gpu.gpu_total) * 100
                            : 0;
                        const usedPercentage =
                          gpu.gpu_total > 0
                            ? (usedGpus / gpu.gpu_total) * 100
                            : 0;
                        return (
                          <div
                            key={gpu.gpu_name}
                            className="p-2 border rounded w-full"
                          >
                            <div className="flex justify-between items-center mb-1">
                              <span className="font-medium">
                                {gpu.gpu_name}
                              </span>
                              <span className="text-sm text-gray-600">
                                {gpu.gpu_free} Free / {gpu.gpu_total} Total
                              </span>
                            </div>
                            <div className="w-full bg-gray-200 rounded h-6 flex overflow-hidden">
                              <div
                                style={{ width: `${usedPercentage}%` }}
                                className="bg-sky-500 h-full flex items-center justify-center text-white text-xs"
                                title={`Used: ${usedGpus} (${usedPercentage.toFixed(1)}%)`}
                              >
                                {usedGpus > 0 && usedPercentage > 10
                                  ? `${usedGpus} Used`
                                  : ''}
                              </div>
                              <div
                                style={{ width: `${freePercentage}%` }}
                                className="bg-green-700 h-full flex items-center justify-center text-white text-xs"
                                title={`Free: ${gpu.gpu_free} (${freePercentage.toFixed(1)}%)`}
                              >
                                {gpu.gpu_free > 0 && freePercentage > 10
                                  ? `${gpu.gpu_free} Free`
                                  : ''}
                              </div>
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                </Card>
              ) : (
                <Card className="mb-4 p-4">
                  <div>
                    <h3 className="text-lg font-semibold mb-3">
                      GPUs on Kubernetes
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                      <p className="text-sm text-gray-500">No GPUs found</p>
                    </div>
                  </div>
                </Card>
              )}

              {/* Per-Context GPU Summary Section */}
              {Object.keys(groupedPerContextGPUs).length > 0 && (
                <Card className="mb-4 p-4">
                  <div>
                    <h3 className="text-lg font-semibold mb-3">
                      Per-Context GPUs
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      {Object.entries(groupedPerContextGPUs).map(
                        ([context, gpusInContext]) => (
                          <Card
                            key={context}
                            className="p-4 border flex flex-col"
                          >
                            <div>
                              <h4 className="text-md font-normal mb-3">
                                Context: {context}
                              </h4>
                              <div className="space-y-3">
                                {gpusInContext.map((gpu) => {
                                  const usedGpus = gpu.gpu_total - gpu.gpu_free;
                                  const freePercentage =
                                    gpu.gpu_total > 0
                                      ? (gpu.gpu_free / gpu.gpu_total) * 100
                                      : 0;
                                  const usedPercentage =
                                    gpu.gpu_total > 0
                                      ? (usedGpus / gpu.gpu_total) * 100
                                      : 0;
                                  return (
                                    <div
                                      key={gpu.gpu_name}
                                      className="p-2 border rounded w-full mb-2"
                                    >
                                      <div className="flex justify-between items-center mb-1">
                                        <div>
                                          <span className="font-medium text-gray-800">
                                            {gpu.gpu_name}
                                          </span>
                                          <span className="text-xs text-gray-500 ml-2">
                                            (Requestable:{' '}
                                            {gpu.gpu_requestable_qty_per_node} /
                                            Node)
                                          </span>
                                        </div>
                                        <span className="text-sm text-gray-600">
                                          {gpu.gpu_free} Free / {gpu.gpu_total}{' '}
                                          Total
                                        </span>
                                      </div>
                                      <div className="w-full bg-gray-200 rounded h-6 flex overflow-hidden mt-1">
                                        <div
                                          style={{
                                            width: `${usedPercentage}%`,
                                          }}
                                          className="bg-sky-500 h-full flex items-center justify-center text-white text-xs"
                                          title={`Used: ${usedGpus} (${usedPercentage.toFixed(1)}%)`}
                                        >
                                          {usedGpus > 0 && usedPercentage > 10
                                            ? `${usedGpus}`
                                            : ''}
                                        </div>
                                        <div
                                          style={{
                                            width: `${freePercentage}%`,
                                          }}
                                          className="bg-green-700 h-full flex items-center justify-center text-white text-xs"
                                          title={`Free: ${gpu.gpu_free} (${freePercentage.toFixed(1)}%)`}
                                        >
                                          {gpu.gpu_free > 0 &&
                                          freePercentage > 10
                                            ? `${gpu.gpu_free}`
                                            : ''}
                                        </div>
                                      </div>
                                    </div>
                                  );
                                })}
                              </div>

                              {/* Nodes Table within Context Card */}
                              {groupedPerNodeGPUs[context] &&
                                groupedPerNodeGPUs[context].length > 0 && (
                                  <div className="mt-4 pt-3 border-t">
                                    {/* <h5 className="text-sm font-semibold mb-2 text-gray-600">
                                      Nodes in {context}:
                                    </h5> */}
                                    <div className="max-h-52 overflow-y-auto">
                                      <div className="overflow-x-auto">
                                        <table className="min-w-full text-sm border-b border-gray-200">
                                          <thead className="bg-gray-100 sticky top-0 z-10">
                                            <tr>
                                              <th className="p-2 text-left font-medium text-gray-600">
                                                Node Name
                                              </th>
                                              <th className="p-2 text-left font-medium text-gray-600">
                                                GPU
                                              </th>
                                              <th className="p-2 text-right font-medium text-gray-600">
                                                Availability
                                              </th>
                                            </tr>
                                          </thead>
                                          <tbody className="bg-white divide-y divide-gray-200">
                                            {groupedPerNodeGPUs[context].map(
                                              (node, index) => (
                                                <tr
                                                  key={`${node.node_name}-${index}`}
                                                >
                                                  <td className="p-2 whitespace-nowrap text-gray-700">
                                                    {node.node_name}
                                                  </td>
                                                  <td className="p-2 whitespace-nowrap text-gray-700">
                                                    {node.gpu_name}
                                                  </td>
                                                  <td className="p-2 whitespace-nowrap text-right text-gray-700">
                                                    {`${node.gpu_free} of ${node.gpu_total} free`}
                                                  </td>
                                                </tr>
                                              )
                                            )}
                                          </tbody>
                                        </table>
                                      </div>
                                    </div>
                                  </div>
                                )}
                            </div>
                          </Card>
                        )
                      )}
                    </div>
                  </div>
                </Card>
              )}
            </>
          )}
        </>
      ) : (
        // Cloud GPUs Tab
        <div>
          {cloudLoading ? (
            <div className="flex flex-col items-center justify-center h-64">
              <CircularProgress size={32} className="mb-4" />
              <span className="text-gray-500 text-lg">
                Loading Cloud GPUs...
              </span>
            </div>
          ) : (
            <>
              {/* Common GPUs Card */}
              {selectedTab === 'cloud' && !cloudLoading && (
                <Card className="mb-4 p-4">
                  <div>
                    <CloudGpuTable
                      data={cloudData.commonGPUs}
                      title="Common GPUs"
                    />
                  </div>
                </Card>
              )}
              {/* TPUs Card */}
              {selectedTab === 'cloud' && !cloudLoading && (
                <Card className="mb-4 p-4">
                  <div>
                    <CloudGpuTable data={cloudData.tpus} title="TPUs" />
                  </div>
                </Card>
              )}
              {/* Other GPUs Card */}
              {selectedTab === 'cloud' && !cloudLoading && (
                <Card className="mb-4 p-4">
                  <div>
                    <CloudGpuTable
                      data={cloudData.otherGPUs}
                      title="Other GPUs"
                    />
                  </div>
                </Card>
              )}
            </>
          )}
        </div>
      )}
    </Layout>
  );
}

// Helper table component for cloud GPUs
function CloudGpuTable({ data, title }) {
  const [currentPage, setCurrentPage] = React.useState(1);
  const [pageSize, setPageSize] = React.useState(10);

  if (!data || data.length === 0) {
    return (
      <>
        <h3 className="text-lg font-semibold mb-3">{title}</h3>
        <p className="text-sm text-gray-500">No GPUs found</p>
      </>
    );
  }

  const totalPages = Math.ceil(data.length / pageSize);
  const startIndex = (currentPage - 1) * pageSize;
  const endIndex = startIndex + pageSize;
  const paginatedData = data.slice(startIndex, endIndex);

  const goToPreviousPage = () => {
    setCurrentPage((page) => Math.max(page - 1, 1));
  };
  const goToNextPage = () => {
    setCurrentPage((page) => Math.min(page + 1, totalPages));
  };
  const handlePageSizeChange = (e) => {
    const newSize = parseInt(e.target.value, 10);
    setPageSize(newSize);
    setCurrentPage(1);
  };

  return (
    <>
      <h3 className="text-lg font-semibold mb-3">{title}</h3>
      <div className="overflow-x-auto">
        <table className="min-w-full text-sm border-b border-gray-200">
          <thead className="bg-gray-100">
            <tr>
              <th className="p-2 text-left font-medium text-gray-600">GPU</th>
              <th className="p-2 text-left font-medium text-gray-600">
                Available Quantities / Node
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {paginatedData.map((gpu, idx) => (
              <tr key={gpu.gpu_name + idx}>
                <td className="p-2 whitespace-nowrap text-gray-700">
                  {gpu.gpu_name}
                </td>
                <td className="p-2 whitespace-nowrap text-gray-700">
                  {gpu.gpu_quantities}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      {/* Pagination controls */}
      {data.length > 0 && (
        <div className="flex justify-end items-center py-2 px-4 text-sm text-gray-700">
          <div className="flex items-center space-x-4">
            <div className="flex items-center">
              <span className="mr-2">Rows per page:</span>
              <div className="relative inline-block">
                <select
                  value={pageSize}
                  onChange={handlePageSizeChange}
                  className="py-1 pl-2 pr-6 appearance-none outline-none cursor-pointer border-none bg-transparent"
                  style={{ minWidth: '40px' }}
                >
                  <option value={10}>10</option>
                  <option value={25}>25</option>
                  <option value={50}>50</option>
                  <option value={100}>100</option>
                </select>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-4 w-4 text-gray-500 absolute right-0 top-1/2 transform -translate-y-1/2 pointer-events-none"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M19 9l-7 7-7-7"
                  />
                </svg>
              </div>
            </div>
            <div>
              {startIndex + 1} – {Math.min(endIndex, data.length)} of{' '}
              {data.length}
            </div>
            <div className="flex items-center space-x-2">
              <button
                className="p-1 rounded-full hover:bg-gray-200 disabled:opacity-30 disabled:hover:bg-transparent"
                onClick={goToPreviousPage}
                disabled={currentPage === 1}
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <path d="M15 18l-6-6 6-6" />
                </svg>
              </button>
              <button
                className="p-1 rounded-full hover:bg-gray-200 disabled:opacity-30 disabled:hover:bg-transparent"
                onClick={goToNextPage}
                disabled={currentPage === totalPages || totalPages === 0}
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <path d="M9 18l6-6-6-6" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}
